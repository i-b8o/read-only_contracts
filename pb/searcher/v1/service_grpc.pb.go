// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service.proto

package pb_searcher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearcherGRPCClient is the client API for SearcherGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearcherGRPCClient interface {
	General(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponseMessage, error)
	Doc(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponseMessage, error)
	Chapter(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponseMessage, error)
	Pargaraph(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponseMessage, error)
}

type searcherGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewSearcherGRPCClient(cc grpc.ClientConnInterface) SearcherGRPCClient {
	return &searcherGRPCClient{cc}
}

func (c *searcherGRPCClient) General(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponseMessage, error) {
	out := new(SearchResponseMessage)
	err := c.cc.Invoke(ctx, "/searcher.v1.SearcherGRPC/General", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searcherGRPCClient) Doc(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponseMessage, error) {
	out := new(SearchResponseMessage)
	err := c.cc.Invoke(ctx, "/searcher.v1.SearcherGRPC/Doc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searcherGRPCClient) Chapter(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponseMessage, error) {
	out := new(SearchResponseMessage)
	err := c.cc.Invoke(ctx, "/searcher.v1.SearcherGRPC/Chapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searcherGRPCClient) Pargaraph(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponseMessage, error) {
	out := new(SearchResponseMessage)
	err := c.cc.Invoke(ctx, "/searcher.v1.SearcherGRPC/Pargaraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearcherGRPCServer is the server API for SearcherGRPC service.
// All implementations must embed UnimplementedSearcherGRPCServer
// for forward compatibility
type SearcherGRPCServer interface {
	General(context.Context, *SearchRequest) (*SearchResponseMessage, error)
	Doc(context.Context, *SearchRequest) (*SearchResponseMessage, error)
	Chapter(context.Context, *SearchRequest) (*SearchResponseMessage, error)
	Pargaraph(context.Context, *SearchRequest) (*SearchResponseMessage, error)
	mustEmbedUnimplementedSearcherGRPCServer()
}

// UnimplementedSearcherGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedSearcherGRPCServer struct {
}

func (UnimplementedSearcherGRPCServer) General(context.Context, *SearchRequest) (*SearchResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method General not implemented")
}
func (UnimplementedSearcherGRPCServer) Doc(context.Context, *SearchRequest) (*SearchResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Doc not implemented")
}
func (UnimplementedSearcherGRPCServer) Chapter(context.Context, *SearchRequest) (*SearchResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chapter not implemented")
}
func (UnimplementedSearcherGRPCServer) Pargaraph(context.Context, *SearchRequest) (*SearchResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pargaraph not implemented")
}
func (UnimplementedSearcherGRPCServer) mustEmbedUnimplementedSearcherGRPCServer() {}

// UnsafeSearcherGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearcherGRPCServer will
// result in compilation errors.
type UnsafeSearcherGRPCServer interface {
	mustEmbedUnimplementedSearcherGRPCServer()
}

func RegisterSearcherGRPCServer(s grpc.ServiceRegistrar, srv SearcherGRPCServer) {
	s.RegisterService(&SearcherGRPC_ServiceDesc, srv)
}

func _SearcherGRPC_General_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearcherGRPCServer).General(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/searcher.v1.SearcherGRPC/General",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearcherGRPCServer).General(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearcherGRPC_Doc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearcherGRPCServer).Doc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/searcher.v1.SearcherGRPC/Doc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearcherGRPCServer).Doc(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearcherGRPC_Chapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearcherGRPCServer).Chapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/searcher.v1.SearcherGRPC/Chapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearcherGRPCServer).Chapter(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearcherGRPC_Pargaraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearcherGRPCServer).Pargaraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/searcher.v1.SearcherGRPC/Pargaraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearcherGRPCServer).Pargaraph(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearcherGRPC_ServiceDesc is the grpc.ServiceDesc for SearcherGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearcherGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "searcher.v1.SearcherGRPC",
	HandlerType: (*SearcherGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "General",
			Handler:    _SearcherGRPC_General_Handler,
		},
		{
			MethodName: "Doc",
			Handler:    _SearcherGRPC_Doc_Handler,
		},
		{
			MethodName: "Chapter",
			Handler:    _SearcherGRPC_Chapter_Handler,
		},
		{
			MethodName: "Pargaraph",
			Handler:    _SearcherGRPC_Pargaraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
