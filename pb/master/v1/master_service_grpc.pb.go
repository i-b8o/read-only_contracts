// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: master_service.proto

package pb_master

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterRegulationGRPCClient is the client API for MasterRegulationGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterRegulationGRPCClient interface {
	Create(ctx context.Context, in *CreateRegulationRequest, opts ...grpc.CallOption) (*CreateRegulationResponse, error)
	GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllRegulationsResponse, error)
	Delete(ctx context.Context, in *DeleteRegulationRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateLinks(ctx context.Context, in *UpdateLinksRequest, opts ...grpc.CallOption) (*UpdateLinksResponse, error)
	GetAbsents(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAbsentsResponse, error)
}

type masterRegulationGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterRegulationGRPCClient(cc grpc.ClientConnInterface) MasterRegulationGRPCClient {
	return &masterRegulationGRPCClient{cc}
}

func (c *masterRegulationGRPCClient) Create(ctx context.Context, in *CreateRegulationRequest, opts ...grpc.CallOption) (*CreateRegulationResponse, error) {
	out := new(CreateRegulationResponse)
	err := c.cc.Invoke(ctx, "/master.v1.MasterRegulationGRPC/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRegulationGRPCClient) GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllRegulationsResponse, error) {
	out := new(GetAllRegulationsResponse)
	err := c.cc.Invoke(ctx, "/master.v1.MasterRegulationGRPC/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRegulationGRPCClient) Delete(ctx context.Context, in *DeleteRegulationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/master.v1.MasterRegulationGRPC/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRegulationGRPCClient) UpdateLinks(ctx context.Context, in *UpdateLinksRequest, opts ...grpc.CallOption) (*UpdateLinksResponse, error) {
	out := new(UpdateLinksResponse)
	err := c.cc.Invoke(ctx, "/master.v1.MasterRegulationGRPC/UpdateLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRegulationGRPCClient) GetAbsents(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAbsentsResponse, error) {
	out := new(GetAbsentsResponse)
	err := c.cc.Invoke(ctx, "/master.v1.MasterRegulationGRPC/GetAbsents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterRegulationGRPCServer is the server API for MasterRegulationGRPC service.
// All implementations must embed UnimplementedMasterRegulationGRPCServer
// for forward compatibility
type MasterRegulationGRPCServer interface {
	Create(context.Context, *CreateRegulationRequest) (*CreateRegulationResponse, error)
	GetAll(context.Context, *Empty) (*GetAllRegulationsResponse, error)
	Delete(context.Context, *DeleteRegulationRequest) (*Empty, error)
	UpdateLinks(context.Context, *UpdateLinksRequest) (*UpdateLinksResponse, error)
	GetAbsents(context.Context, *Empty) (*GetAbsentsResponse, error)
	mustEmbedUnimplementedMasterRegulationGRPCServer()
}

// UnimplementedMasterRegulationGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedMasterRegulationGRPCServer struct {
}

func (UnimplementedMasterRegulationGRPCServer) Create(context.Context, *CreateRegulationRequest) (*CreateRegulationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMasterRegulationGRPCServer) GetAll(context.Context, *Empty) (*GetAllRegulationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedMasterRegulationGRPCServer) Delete(context.Context, *DeleteRegulationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMasterRegulationGRPCServer) UpdateLinks(context.Context, *UpdateLinksRequest) (*UpdateLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLinks not implemented")
}
func (UnimplementedMasterRegulationGRPCServer) GetAbsents(context.Context, *Empty) (*GetAbsentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbsents not implemented")
}
func (UnimplementedMasterRegulationGRPCServer) mustEmbedUnimplementedMasterRegulationGRPCServer() {}

// UnsafeMasterRegulationGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterRegulationGRPCServer will
// result in compilation errors.
type UnsafeMasterRegulationGRPCServer interface {
	mustEmbedUnimplementedMasterRegulationGRPCServer()
}

func RegisterMasterRegulationGRPCServer(s grpc.ServiceRegistrar, srv MasterRegulationGRPCServer) {
	s.RegisterService(&MasterRegulationGRPC_ServiceDesc, srv)
}

func _MasterRegulationGRPC_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegulationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRegulationGRPCServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.v1.MasterRegulationGRPC/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRegulationGRPCServer).Create(ctx, req.(*CreateRegulationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRegulationGRPC_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRegulationGRPCServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.v1.MasterRegulationGRPC/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRegulationGRPCServer).GetAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRegulationGRPC_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegulationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRegulationGRPCServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.v1.MasterRegulationGRPC/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRegulationGRPCServer).Delete(ctx, req.(*DeleteRegulationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRegulationGRPC_UpdateLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRegulationGRPCServer).UpdateLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.v1.MasterRegulationGRPC/UpdateLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRegulationGRPCServer).UpdateLinks(ctx, req.(*UpdateLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRegulationGRPC_GetAbsents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRegulationGRPCServer).GetAbsents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.v1.MasterRegulationGRPC/GetAbsents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRegulationGRPCServer).GetAbsents(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterRegulationGRPC_ServiceDesc is the grpc.ServiceDesc for MasterRegulationGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterRegulationGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master.v1.MasterRegulationGRPC",
	HandlerType: (*MasterRegulationGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MasterRegulationGRPC_Create_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _MasterRegulationGRPC_GetAll_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MasterRegulationGRPC_Delete_Handler,
		},
		{
			MethodName: "UpdateLinks",
			Handler:    _MasterRegulationGRPC_UpdateLinks_Handler,
		},
		{
			MethodName: "GetAbsents",
			Handler:    _MasterRegulationGRPC_GetAbsents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master_service.proto",
}

// MasterChapterGRPCClient is the client API for MasterChapterGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterChapterGRPCClient interface {
	Create(ctx context.Context, in *CreateChapterRequest, opts ...grpc.CallOption) (*CreateChapterResponse, error)
	GetAll(ctx context.Context, in *GetAllChaptersRequest, opts ...grpc.CallOption) (*GetAllChaptersResponse, error)
}

type masterChapterGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterChapterGRPCClient(cc grpc.ClientConnInterface) MasterChapterGRPCClient {
	return &masterChapterGRPCClient{cc}
}

func (c *masterChapterGRPCClient) Create(ctx context.Context, in *CreateChapterRequest, opts ...grpc.CallOption) (*CreateChapterResponse, error) {
	out := new(CreateChapterResponse)
	err := c.cc.Invoke(ctx, "/master.v1.MasterChapterGRPC/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterChapterGRPCClient) GetAll(ctx context.Context, in *GetAllChaptersRequest, opts ...grpc.CallOption) (*GetAllChaptersResponse, error) {
	out := new(GetAllChaptersResponse)
	err := c.cc.Invoke(ctx, "/master.v1.MasterChapterGRPC/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterChapterGRPCServer is the server API for MasterChapterGRPC service.
// All implementations must embed UnimplementedMasterChapterGRPCServer
// for forward compatibility
type MasterChapterGRPCServer interface {
	Create(context.Context, *CreateChapterRequest) (*CreateChapterResponse, error)
	GetAll(context.Context, *GetAllChaptersRequest) (*GetAllChaptersResponse, error)
	mustEmbedUnimplementedMasterChapterGRPCServer()
}

// UnimplementedMasterChapterGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedMasterChapterGRPCServer struct {
}

func (UnimplementedMasterChapterGRPCServer) Create(context.Context, *CreateChapterRequest) (*CreateChapterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMasterChapterGRPCServer) GetAll(context.Context, *GetAllChaptersRequest) (*GetAllChaptersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedMasterChapterGRPCServer) mustEmbedUnimplementedMasterChapterGRPCServer() {}

// UnsafeMasterChapterGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterChapterGRPCServer will
// result in compilation errors.
type UnsafeMasterChapterGRPCServer interface {
	mustEmbedUnimplementedMasterChapterGRPCServer()
}

func RegisterMasterChapterGRPCServer(s grpc.ServiceRegistrar, srv MasterChapterGRPCServer) {
	s.RegisterService(&MasterChapterGRPC_ServiceDesc, srv)
}

func _MasterChapterGRPC_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChapterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterChapterGRPCServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.v1.MasterChapterGRPC/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterChapterGRPCServer).Create(ctx, req.(*CreateChapterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterChapterGRPC_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllChaptersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterChapterGRPCServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.v1.MasterChapterGRPC/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterChapterGRPCServer).GetAll(ctx, req.(*GetAllChaptersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterChapterGRPC_ServiceDesc is the grpc.ServiceDesc for MasterChapterGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterChapterGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master.v1.MasterChapterGRPC",
	HandlerType: (*MasterChapterGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MasterChapterGRPC_Create_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _MasterChapterGRPC_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master_service.proto",
}

// MasterParagraphGRPCClient is the client API for MasterParagraphGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterParagraphGRPCClient interface {
	Create(ctx context.Context, in *CreateParagraphsRequest, opts ...grpc.CallOption) (*Empty, error)
	GetOne(ctx context.Context, in *GetOneParagraphRequest, opts ...grpc.CallOption) (*GetOneParagraphResponse, error)
	Update(ctx context.Context, in *UpdateParagraphRequest, opts ...grpc.CallOption) (*Empty, error)
}

type masterParagraphGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterParagraphGRPCClient(cc grpc.ClientConnInterface) MasterParagraphGRPCClient {
	return &masterParagraphGRPCClient{cc}
}

func (c *masterParagraphGRPCClient) Create(ctx context.Context, in *CreateParagraphsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/master.v1.MasterParagraphGRPC/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterParagraphGRPCClient) GetOne(ctx context.Context, in *GetOneParagraphRequest, opts ...grpc.CallOption) (*GetOneParagraphResponse, error) {
	out := new(GetOneParagraphResponse)
	err := c.cc.Invoke(ctx, "/master.v1.MasterParagraphGRPC/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterParagraphGRPCClient) Update(ctx context.Context, in *UpdateParagraphRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/master.v1.MasterParagraphGRPC/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterParagraphGRPCServer is the server API for MasterParagraphGRPC service.
// All implementations must embed UnimplementedMasterParagraphGRPCServer
// for forward compatibility
type MasterParagraphGRPCServer interface {
	Create(context.Context, *CreateParagraphsRequest) (*Empty, error)
	GetOne(context.Context, *GetOneParagraphRequest) (*GetOneParagraphResponse, error)
	Update(context.Context, *UpdateParagraphRequest) (*Empty, error)
	mustEmbedUnimplementedMasterParagraphGRPCServer()
}

// UnimplementedMasterParagraphGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedMasterParagraphGRPCServer struct {
}

func (UnimplementedMasterParagraphGRPCServer) Create(context.Context, *CreateParagraphsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMasterParagraphGRPCServer) GetOne(context.Context, *GetOneParagraphRequest) (*GetOneParagraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedMasterParagraphGRPCServer) Update(context.Context, *UpdateParagraphRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMasterParagraphGRPCServer) mustEmbedUnimplementedMasterParagraphGRPCServer() {}

// UnsafeMasterParagraphGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterParagraphGRPCServer will
// result in compilation errors.
type UnsafeMasterParagraphGRPCServer interface {
	mustEmbedUnimplementedMasterParagraphGRPCServer()
}

func RegisterMasterParagraphGRPCServer(s grpc.ServiceRegistrar, srv MasterParagraphGRPCServer) {
	s.RegisterService(&MasterParagraphGRPC_ServiceDesc, srv)
}

func _MasterParagraphGRPC_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateParagraphsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterParagraphGRPCServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.v1.MasterParagraphGRPC/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterParagraphGRPCServer).Create(ctx, req.(*CreateParagraphsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterParagraphGRPC_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneParagraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterParagraphGRPCServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.v1.MasterParagraphGRPC/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterParagraphGRPCServer).GetOne(ctx, req.(*GetOneParagraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterParagraphGRPC_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateParagraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterParagraphGRPCServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.v1.MasterParagraphGRPC/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterParagraphGRPCServer).Update(ctx, req.(*UpdateParagraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterParagraphGRPC_ServiceDesc is the grpc.ServiceDesc for MasterParagraphGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterParagraphGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master.v1.MasterParagraphGRPC",
	HandlerType: (*MasterParagraphGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MasterParagraphGRPC_Create_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _MasterParagraphGRPC_GetOne_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MasterParagraphGRPC_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master_service.proto",
}
