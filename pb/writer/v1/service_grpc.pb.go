// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service.proto

package pb_writer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WriterDocGRPCClient is the client API for WriterDocGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WriterDocGRPCClient interface {
	Create(ctx context.Context, in *CreateDocRequest, opts ...grpc.CallOption) (*CreateDocResponse, error)
	Delete(ctx context.Context, in *DeleteDocRequest, opts ...grpc.CallOption) (*Empty, error)
	GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetDocsResponse, error)
}

type writerDocGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewWriterDocGRPCClient(cc grpc.ClientConnInterface) WriterDocGRPCClient {
	return &writerDocGRPCClient{cc}
}

func (c *writerDocGRPCClient) Create(ctx context.Context, in *CreateDocRequest, opts ...grpc.CallOption) (*CreateDocResponse, error) {
	out := new(CreateDocResponse)
	err := c.cc.Invoke(ctx, "/writer.v1.WriterDocGRPC/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writerDocGRPCClient) Delete(ctx context.Context, in *DeleteDocRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/writer.v1.WriterDocGRPC/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writerDocGRPCClient) GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetDocsResponse, error) {
	out := new(GetDocsResponse)
	err := c.cc.Invoke(ctx, "/writer.v1.WriterDocGRPC/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WriterDocGRPCServer is the server API for WriterDocGRPC service.
// All implementations must embed UnimplementedWriterDocGRPCServer
// for forward compatibility
type WriterDocGRPCServer interface {
	Create(context.Context, *CreateDocRequest) (*CreateDocResponse, error)
	Delete(context.Context, *DeleteDocRequest) (*Empty, error)
	GetAll(context.Context, *Empty) (*GetDocsResponse, error)
	mustEmbedUnimplementedWriterDocGRPCServer()
}

// UnimplementedWriterDocGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedWriterDocGRPCServer struct {
}

func (UnimplementedWriterDocGRPCServer) Create(context.Context, *CreateDocRequest) (*CreateDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWriterDocGRPCServer) Delete(context.Context, *DeleteDocRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWriterDocGRPCServer) GetAll(context.Context, *Empty) (*GetDocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedWriterDocGRPCServer) mustEmbedUnimplementedWriterDocGRPCServer() {}

// UnsafeWriterDocGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WriterDocGRPCServer will
// result in compilation errors.
type UnsafeWriterDocGRPCServer interface {
	mustEmbedUnimplementedWriterDocGRPCServer()
}

func RegisterWriterDocGRPCServer(s grpc.ServiceRegistrar, srv WriterDocGRPCServer) {
	s.RegisterService(&WriterDocGRPC_ServiceDesc, srv)
}

func _WriterDocGRPC_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterDocGRPCServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/writer.v1.WriterDocGRPC/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterDocGRPCServer).Create(ctx, req.(*CreateDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WriterDocGRPC_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterDocGRPCServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/writer.v1.WriterDocGRPC/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterDocGRPCServer).Delete(ctx, req.(*DeleteDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WriterDocGRPC_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterDocGRPCServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/writer.v1.WriterDocGRPC/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterDocGRPCServer).GetAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WriterDocGRPC_ServiceDesc is the grpc.ServiceDesc for WriterDocGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WriterDocGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "writer.v1.WriterDocGRPC",
	HandlerType: (*WriterDocGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WriterDocGRPC_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WriterDocGRPC_Delete_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _WriterDocGRPC_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Descriptiondata: "service.proto",
}

// WriterChapterGRPCClient is the client API for WriterChapterGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WriterChapterGRPCClient interface {
	Create(ctx context.Context, in *CreateChapterRequest, opts ...grpc.CallOption) (*CreateChapterResponse, error)
	GetAll(ctx context.Context, in *GetAllChaptersIdsRequest, opts ...grpc.CallOption) (*GetAllChaptersIdsResponse, error)
	GetDocId(ctx context.Context, in *GetDocIdByChapterIdRequest, opts ...grpc.CallOption) (*GetDocIdByChapterIdResponse, error)
}

type writerChapterGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewWriterChapterGRPCClient(cc grpc.ClientConnInterface) WriterChapterGRPCClient {
	return &writerChapterGRPCClient{cc}
}

func (c *writerChapterGRPCClient) Create(ctx context.Context, in *CreateChapterRequest, opts ...grpc.CallOption) (*CreateChapterResponse, error) {
	out := new(CreateChapterResponse)
	err := c.cc.Invoke(ctx, "/writer.v1.WriterChapterGRPC/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writerChapterGRPCClient) GetAll(ctx context.Context, in *GetAllChaptersIdsRequest, opts ...grpc.CallOption) (*GetAllChaptersIdsResponse, error) {
	out := new(GetAllChaptersIdsResponse)
	err := c.cc.Invoke(ctx, "/writer.v1.WriterChapterGRPC/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writerChapterGRPCClient) GetDocId(ctx context.Context, in *GetDocIdByChapterIdRequest, opts ...grpc.CallOption) (*GetDocIdByChapterIdResponse, error) {
	out := new(GetDocIdByChapterIdResponse)
	err := c.cc.Invoke(ctx, "/writer.v1.WriterChapterGRPC/GetDocId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WriterChapterGRPCServer is the server API for WriterChapterGRPC service.
// All implementations must embed UnimplementedWriterChapterGRPCServer
// for forward compatibility
type WriterChapterGRPCServer interface {
	Create(context.Context, *CreateChapterRequest) (*CreateChapterResponse, error)
	GetAll(context.Context, *GetAllChaptersIdsRequest) (*GetAllChaptersIdsResponse, error)
	GetDocId(context.Context, *GetDocIdByChapterIdRequest) (*GetDocIdByChapterIdResponse, error)
	mustEmbedUnimplementedWriterChapterGRPCServer()
}

// UnimplementedWriterChapterGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedWriterChapterGRPCServer struct {
}

func (UnimplementedWriterChapterGRPCServer) Create(context.Context, *CreateChapterRequest) (*CreateChapterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWriterChapterGRPCServer) GetAll(context.Context, *GetAllChaptersIdsRequest) (*GetAllChaptersIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedWriterChapterGRPCServer) GetDocId(context.Context, *GetDocIdByChapterIdRequest) (*GetDocIdByChapterIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocId not implemented")
}
func (UnimplementedWriterChapterGRPCServer) mustEmbedUnimplementedWriterChapterGRPCServer() {}

// UnsafeWriterChapterGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WriterChapterGRPCServer will
// result in compilation errors.
type UnsafeWriterChapterGRPCServer interface {
	mustEmbedUnimplementedWriterChapterGRPCServer()
}

func RegisterWriterChapterGRPCServer(s grpc.ServiceRegistrar, srv WriterChapterGRPCServer) {
	s.RegisterService(&WriterChapterGRPC_ServiceDesc, srv)
}

func _WriterChapterGRPC_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChapterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterChapterGRPCServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/writer.v1.WriterChapterGRPC/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterChapterGRPCServer).Create(ctx, req.(*CreateChapterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WriterChapterGRPC_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllChaptersIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterChapterGRPCServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/writer.v1.WriterChapterGRPC/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterChapterGRPCServer).GetAll(ctx, req.(*GetAllChaptersIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WriterChapterGRPC_GetDocId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocIdByChapterIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterChapterGRPCServer).GetDocId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/writer.v1.WriterChapterGRPC/GetDocId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterChapterGRPCServer).GetDocId(ctx, req.(*GetDocIdByChapterIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WriterChapterGRPC_ServiceDesc is the grpc.ServiceDesc for WriterChapterGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WriterChapterGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "writer.v1.WriterChapterGRPC",
	HandlerType: (*WriterChapterGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WriterChapterGRPC_Create_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _WriterChapterGRPC_GetAll_Handler,
		},
		{
			MethodName: "GetDocId",
			Handler:    _WriterChapterGRPC_GetDocId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Descriptiondata: "service.proto",
}

// WriterParagraphGRPCClient is the client API for WriterParagraphGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WriterParagraphGRPCClient interface {
	GetOne(ctx context.Context, in *GetOneParagraphRequest, opts ...grpc.CallOption) (*GetOneParagraphResponse, error)
	CreateAll(ctx context.Context, in *CreateAllParagraphsRequest, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *UpdateOneParagraphRequest, opts ...grpc.CallOption) (*Empty, error)
	GetWithHrefs(ctx context.Context, in *GetParagraphsWithHrefsRequest, opts ...grpc.CallOption) (*GetParagraphsWithHrefsResponse, error)
}

type writerParagraphGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewWriterParagraphGRPCClient(cc grpc.ClientConnInterface) WriterParagraphGRPCClient {
	return &writerParagraphGRPCClient{cc}
}

func (c *writerParagraphGRPCClient) GetOne(ctx context.Context, in *GetOneParagraphRequest, opts ...grpc.CallOption) (*GetOneParagraphResponse, error) {
	out := new(GetOneParagraphResponse)
	err := c.cc.Invoke(ctx, "/writer.v1.WriterParagraphGRPC/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writerParagraphGRPCClient) CreateAll(ctx context.Context, in *CreateAllParagraphsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/writer.v1.WriterParagraphGRPC/CreateAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writerParagraphGRPCClient) Update(ctx context.Context, in *UpdateOneParagraphRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/writer.v1.WriterParagraphGRPC/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writerParagraphGRPCClient) GetWithHrefs(ctx context.Context, in *GetParagraphsWithHrefsRequest, opts ...grpc.CallOption) (*GetParagraphsWithHrefsResponse, error) {
	out := new(GetParagraphsWithHrefsResponse)
	err := c.cc.Invoke(ctx, "/writer.v1.WriterParagraphGRPC/GetWithHrefs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WriterParagraphGRPCServer is the server API for WriterParagraphGRPC service.
// All implementations must embed UnimplementedWriterParagraphGRPCServer
// for forward compatibility
type WriterParagraphGRPCServer interface {
	GetOne(context.Context, *GetOneParagraphRequest) (*GetOneParagraphResponse, error)
	CreateAll(context.Context, *CreateAllParagraphsRequest) (*Empty, error)
	Update(context.Context, *UpdateOneParagraphRequest) (*Empty, error)
	GetWithHrefs(context.Context, *GetParagraphsWithHrefsRequest) (*GetParagraphsWithHrefsResponse, error)
	mustEmbedUnimplementedWriterParagraphGRPCServer()
}

// UnimplementedWriterParagraphGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedWriterParagraphGRPCServer struct {
}

func (UnimplementedWriterParagraphGRPCServer) GetOne(context.Context, *GetOneParagraphRequest) (*GetOneParagraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedWriterParagraphGRPCServer) CreateAll(context.Context, *CreateAllParagraphsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAll not implemented")
}
func (UnimplementedWriterParagraphGRPCServer) Update(context.Context, *UpdateOneParagraphRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWriterParagraphGRPCServer) GetWithHrefs(context.Context, *GetParagraphsWithHrefsRequest) (*GetParagraphsWithHrefsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithHrefs not implemented")
}
func (UnimplementedWriterParagraphGRPCServer) mustEmbedUnimplementedWriterParagraphGRPCServer() {}

// UnsafeWriterParagraphGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WriterParagraphGRPCServer will
// result in compilation errors.
type UnsafeWriterParagraphGRPCServer interface {
	mustEmbedUnimplementedWriterParagraphGRPCServer()
}

func RegisterWriterParagraphGRPCServer(s grpc.ServiceRegistrar, srv WriterParagraphGRPCServer) {
	s.RegisterService(&WriterParagraphGRPC_ServiceDesc, srv)
}

func _WriterParagraphGRPC_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneParagraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterParagraphGRPCServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/writer.v1.WriterParagraphGRPC/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterParagraphGRPCServer).GetOne(ctx, req.(*GetOneParagraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WriterParagraphGRPC_CreateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAllParagraphsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterParagraphGRPCServer).CreateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/writer.v1.WriterParagraphGRPC/CreateAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterParagraphGRPCServer).CreateAll(ctx, req.(*CreateAllParagraphsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WriterParagraphGRPC_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneParagraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterParagraphGRPCServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/writer.v1.WriterParagraphGRPC/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterParagraphGRPCServer).Update(ctx, req.(*UpdateOneParagraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WriterParagraphGRPC_GetWithHrefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParagraphsWithHrefsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterParagraphGRPCServer).GetWithHrefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/writer.v1.WriterParagraphGRPC/GetWithHrefs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterParagraphGRPCServer).GetWithHrefs(ctx, req.(*GetParagraphsWithHrefsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WriterParagraphGRPC_ServiceDesc is the grpc.ServiceDesc for WriterParagraphGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WriterParagraphGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "writer.v1.WriterParagraphGRPC",
	HandlerType: (*WriterParagraphGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _WriterParagraphGRPC_GetOne_Handler,
		},
		{
			MethodName: "CreateAll",
			Handler:    _WriterParagraphGRPC_CreateAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WriterParagraphGRPC_Update_Handler,
		},
		{
			MethodName: "GetWithHrefs",
			Handler:    _WriterParagraphGRPC_GetWithHrefs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Descriptiondata: "service.proto",
}
