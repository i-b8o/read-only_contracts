// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service.proto

package pb_reader

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReaderGRPCClient is the client API for ReaderGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReaderGRPCClient interface {
	GetOneRegulation(ctx context.Context, in *GetOneRegulationRequest, opts ...grpc.CallOption) (*GetOneRegulationResponse, error)
	GetOneChapter(ctx context.Context, in *GetOneChapterRequest, opts ...grpc.CallOption) (*GetOneChapterResponse, error)
	GetAllChaptersByRegulationId(ctx context.Context, in *GetAllChaptersByRegulationIdRequest, opts ...grpc.CallOption) (*GetAllChaptersByRegulationIdResponse, error)
	GetAllParagraphsByChapterId(ctx context.Context, in *GetAllParagraphsByChapterIdRequest, opts ...grpc.CallOption) (*GetAllParagraphsByChapterIdResponse, error)
}

type readerGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewReaderGRPCClient(cc grpc.ClientConnInterface) ReaderGRPCClient {
	return &readerGRPCClient{cc}
}

func (c *readerGRPCClient) GetOneRegulation(ctx context.Context, in *GetOneRegulationRequest, opts ...grpc.CallOption) (*GetOneRegulationResponse, error) {
	out := new(GetOneRegulationResponse)
	err := c.cc.Invoke(ctx, "/reader.v1.ReaderGRPC/GetOneRegulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerGRPCClient) GetOneChapter(ctx context.Context, in *GetOneChapterRequest, opts ...grpc.CallOption) (*GetOneChapterResponse, error) {
	out := new(GetOneChapterResponse)
	err := c.cc.Invoke(ctx, "/reader.v1.ReaderGRPC/GetOneChapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerGRPCClient) GetAllChaptersByRegulationId(ctx context.Context, in *GetAllChaptersByRegulationIdRequest, opts ...grpc.CallOption) (*GetAllChaptersByRegulationIdResponse, error) {
	out := new(GetAllChaptersByRegulationIdResponse)
	err := c.cc.Invoke(ctx, "/reader.v1.ReaderGRPC/GetAllChaptersByRegulationId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerGRPCClient) GetAllParagraphsByChapterId(ctx context.Context, in *GetAllParagraphsByChapterIdRequest, opts ...grpc.CallOption) (*GetAllParagraphsByChapterIdResponse, error) {
	out := new(GetAllParagraphsByChapterIdResponse)
	err := c.cc.Invoke(ctx, "/reader.v1.ReaderGRPC/GetAllParagraphsByChapterId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReaderGRPCServer is the server API for ReaderGRPC service.
// All implementations must embed UnimplementedReaderGRPCServer
// for forward compatibility
type ReaderGRPCServer interface {
	GetOneRegulation(context.Context, *GetOneRegulationRequest) (*GetOneRegulationResponse, error)
	GetOneChapter(context.Context, *GetOneChapterRequest) (*GetOneChapterResponse, error)
	GetAllChaptersByRegulationId(context.Context, *GetAllChaptersByRegulationIdRequest) (*GetAllChaptersByRegulationIdResponse, error)
	GetAllParagraphsByChapterId(context.Context, *GetAllParagraphsByChapterIdRequest) (*GetAllParagraphsByChapterIdResponse, error)
	mustEmbedUnimplementedReaderGRPCServer()
}

// UnimplementedReaderGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedReaderGRPCServer struct {
}

func (UnimplementedReaderGRPCServer) GetOneRegulation(context.Context, *GetOneRegulationRequest) (*GetOneRegulationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneRegulation not implemented")
}
func (UnimplementedReaderGRPCServer) GetOneChapter(context.Context, *GetOneChapterRequest) (*GetOneChapterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneChapter not implemented")
}
func (UnimplementedReaderGRPCServer) GetAllChaptersByRegulationId(context.Context, *GetAllChaptersByRegulationIdRequest) (*GetAllChaptersByRegulationIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChaptersByRegulationId not implemented")
}
func (UnimplementedReaderGRPCServer) GetAllParagraphsByChapterId(context.Context, *GetAllParagraphsByChapterIdRequest) (*GetAllParagraphsByChapterIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllParagraphsByChapterId not implemented")
}
func (UnimplementedReaderGRPCServer) mustEmbedUnimplementedReaderGRPCServer() {}

// UnsafeReaderGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReaderGRPCServer will
// result in compilation errors.
type UnsafeReaderGRPCServer interface {
	mustEmbedUnimplementedReaderGRPCServer()
}

func RegisterReaderGRPCServer(s grpc.ServiceRegistrar, srv ReaderGRPCServer) {
	s.RegisterService(&ReaderGRPC_ServiceDesc, srv)
}

func _ReaderGRPC_GetOneRegulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneRegulationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderGRPCServer).GetOneRegulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reader.v1.ReaderGRPC/GetOneRegulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderGRPCServer).GetOneRegulation(ctx, req.(*GetOneRegulationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderGRPC_GetOneChapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneChapterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderGRPCServer).GetOneChapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reader.v1.ReaderGRPC/GetOneChapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderGRPCServer).GetOneChapter(ctx, req.(*GetOneChapterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderGRPC_GetAllChaptersByRegulationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllChaptersByRegulationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderGRPCServer).GetAllChaptersByRegulationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reader.v1.ReaderGRPC/GetAllChaptersByRegulationId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderGRPCServer).GetAllChaptersByRegulationId(ctx, req.(*GetAllChaptersByRegulationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderGRPC_GetAllParagraphsByChapterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllParagraphsByChapterIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderGRPCServer).GetAllParagraphsByChapterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reader.v1.ReaderGRPC/GetAllParagraphsByChapterId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderGRPCServer).GetAllParagraphsByChapterId(ctx, req.(*GetAllParagraphsByChapterIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReaderGRPC_ServiceDesc is the grpc.ServiceDesc for ReaderGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReaderGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reader.v1.ReaderGRPC",
	HandlerType: (*ReaderGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOneRegulation",
			Handler:    _ReaderGRPC_GetOneRegulation_Handler,
		},
		{
			MethodName: "GetOneChapter",
			Handler:    _ReaderGRPC_GetOneChapter_Handler,
		},
		{
			MethodName: "GetAllChaptersByRegulationId",
			Handler:    _ReaderGRPC_GetAllChaptersByRegulationId_Handler,
		},
		{
			MethodName: "GetAllParagraphsByChapterId",
			Handler:    _ReaderGRPC_GetAllParagraphsByChapterId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
