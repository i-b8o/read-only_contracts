// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service.proto

package pb_reader

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DocGRPCClient is the client API for DocGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocGRPCClient interface {
	GetOne(ctx context.Context, in *GetOneDocRequest, opts ...grpc.CallOption) (*GetOneDocResponse, error)
}

type docGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewDocGRPCClient(cc grpc.ClientConnInterface) DocGRPCClient {
	return &docGRPCClient{cc}
}

func (c *docGRPCClient) GetOne(ctx context.Context, in *GetOneDocRequest, opts ...grpc.CallOption) (*GetOneDocResponse, error) {
	out := new(GetOneDocResponse)
	err := c.cc.Invoke(ctx, "/reader.v1.DocGRPC/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocGRPCServer is the server API for DocGRPC service.
// All implementations must embed UnimplementedDocGRPCServer
// for forward compatibility
type DocGRPCServer interface {
	GetOne(context.Context, *GetOneDocRequest) (*GetOneDocResponse, error)
	mustEmbedUnimplementedDocGRPCServer()
}

// UnimplementedDocGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedDocGRPCServer struct {
}

func (UnimplementedDocGRPCServer) GetOne(context.Context, *GetOneDocRequest) (*GetOneDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedDocGRPCServer) mustEmbedUnimplementedDocGRPCServer() {}

// UnsafeDocGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocGRPCServer will
// result in compilation errors.
type UnsafeDocGRPCServer interface {
	mustEmbedUnimplementedDocGRPCServer()
}

func RegisterDocGRPCServer(s grpc.ServiceRegistrar, srv DocGRPCServer) {
	s.RegisterService(&DocGRPC_ServiceDesc, srv)
}

func _DocGRPC_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocGRPCServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reader.v1.DocGRPC/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocGRPCServer).GetOne(ctx, req.(*GetOneDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocGRPC_ServiceDesc is the grpc.ServiceDesc for DocGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reader.v1.DocGRPC",
	HandlerType: (*DocGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _DocGRPC_GetOne_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ChapterGRPCClient is the client API for ChapterGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChapterGRPCClient interface {
	GetOne(ctx context.Context, in *GetOneChapterRequest, opts ...grpc.CallOption) (*GetOneChapterResponse, error)
	GetAll(ctx context.Context, in *GetAllChaptersByDocIdRequest, opts ...grpc.CallOption) (*GetAllChaptersByDocIdResponse, error)
}

type chapterGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewChapterGRPCClient(cc grpc.ClientConnInterface) ChapterGRPCClient {
	return &chapterGRPCClient{cc}
}

func (c *chapterGRPCClient) GetOne(ctx context.Context, in *GetOneChapterRequest, opts ...grpc.CallOption) (*GetOneChapterResponse, error) {
	out := new(GetOneChapterResponse)
	err := c.cc.Invoke(ctx, "/reader.v1.ChapterGRPC/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chapterGRPCClient) GetAll(ctx context.Context, in *GetAllChaptersByDocIdRequest, opts ...grpc.CallOption) (*GetAllChaptersByDocIdResponse, error) {
	out := new(GetAllChaptersByDocIdResponse)
	err := c.cc.Invoke(ctx, "/reader.v1.ChapterGRPC/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChapterGRPCServer is the server API for ChapterGRPC service.
// All implementations must embed UnimplementedChapterGRPCServer
// for forward compatibility
type ChapterGRPCServer interface {
	GetOne(context.Context, *GetOneChapterRequest) (*GetOneChapterResponse, error)
	GetAll(context.Context, *GetAllChaptersByDocIdRequest) (*GetAllChaptersByDocIdResponse, error)
	mustEmbedUnimplementedChapterGRPCServer()
}

// UnimplementedChapterGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedChapterGRPCServer struct {
}

func (UnimplementedChapterGRPCServer) GetOne(context.Context, *GetOneChapterRequest) (*GetOneChapterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedChapterGRPCServer) GetAll(context.Context, *GetAllChaptersByDocIdRequest) (*GetAllChaptersByDocIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedChapterGRPCServer) mustEmbedUnimplementedChapterGRPCServer() {}

// UnsafeChapterGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChapterGRPCServer will
// result in compilation errors.
type UnsafeChapterGRPCServer interface {
	mustEmbedUnimplementedChapterGRPCServer()
}

func RegisterChapterGRPCServer(s grpc.ServiceRegistrar, srv ChapterGRPCServer) {
	s.RegisterService(&ChapterGRPC_ServiceDesc, srv)
}

func _ChapterGRPC_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneChapterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChapterGRPCServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reader.v1.ChapterGRPC/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChapterGRPCServer).GetOne(ctx, req.(*GetOneChapterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChapterGRPC_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllChaptersByDocIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChapterGRPCServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reader.v1.ChapterGRPC/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChapterGRPCServer).GetAll(ctx, req.(*GetAllChaptersByDocIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChapterGRPC_ServiceDesc is the grpc.ServiceDesc for ChapterGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChapterGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reader.v1.ChapterGRPC",
	HandlerType: (*ChapterGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _ChapterGRPC_GetOne_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ChapterGRPC_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ParagraphGRPCClient is the client API for ParagraphGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParagraphGRPCClient interface {
	GetAll(ctx context.Context, in *GetAllParagraphsByChapterIdRequest, opts ...grpc.CallOption) (*GetAllParagraphsByChapterIdResponse, error)
}

type paragraphGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewParagraphGRPCClient(cc grpc.ClientConnInterface) ParagraphGRPCClient {
	return &paragraphGRPCClient{cc}
}

func (c *paragraphGRPCClient) GetAll(ctx context.Context, in *GetAllParagraphsByChapterIdRequest, opts ...grpc.CallOption) (*GetAllParagraphsByChapterIdResponse, error) {
	out := new(GetAllParagraphsByChapterIdResponse)
	err := c.cc.Invoke(ctx, "/reader.v1.ParagraphGRPC/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParagraphGRPCServer is the server API for ParagraphGRPC service.
// All implementations must embed UnimplementedParagraphGRPCServer
// for forward compatibility
type ParagraphGRPCServer interface {
	GetAll(context.Context, *GetAllParagraphsByChapterIdRequest) (*GetAllParagraphsByChapterIdResponse, error)
	mustEmbedUnimplementedParagraphGRPCServer()
}

// UnimplementedParagraphGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedParagraphGRPCServer struct {
}

func (UnimplementedParagraphGRPCServer) GetAll(context.Context, *GetAllParagraphsByChapterIdRequest) (*GetAllParagraphsByChapterIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedParagraphGRPCServer) mustEmbedUnimplementedParagraphGRPCServer() {}

// UnsafeParagraphGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParagraphGRPCServer will
// result in compilation errors.
type UnsafeParagraphGRPCServer interface {
	mustEmbedUnimplementedParagraphGRPCServer()
}

func RegisterParagraphGRPCServer(s grpc.ServiceRegistrar, srv ParagraphGRPCServer) {
	s.RegisterService(&ParagraphGRPC_ServiceDesc, srv)
}

func _ParagraphGRPC_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllParagraphsByChapterIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParagraphGRPCServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reader.v1.ParagraphGRPC/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParagraphGRPCServer).GetAll(ctx, req.(*GetAllParagraphsByChapterIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParagraphGRPC_ServiceDesc is the grpc.ServiceDesc for ParagraphGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParagraphGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reader.v1.ParagraphGRPC",
	HandlerType: (*ParagraphGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _ParagraphGRPC_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
