// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: service.proto

package pb_reader

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReaderGRPCClient is the client API for ReaderGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReaderGRPCClient interface {
	GetRegulation(ctx context.Context, in *GetRegulationRequest, opts ...grpc.CallOption) (*GetRegulationResponse, error)
	GetChapter(ctx context.Context, in *GetChapterRequest, opts ...grpc.CallOption) (*GetChapterResponse, error)
	GetAllChapters(ctx context.Context, in *GetAllChaptersRequest, opts ...grpc.CallOption) (*GetAllChaptersResponse, error)
	GetParagraphs(ctx context.Context, in *GetParagraphsRequest, opts ...grpc.CallOption) (*GetParagraphsResponse, error)
}

type readerGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewReaderGRPCClient(cc grpc.ClientConnInterface) ReaderGRPCClient {
	return &readerGRPCClient{cc}
}

func (c *readerGRPCClient) GetRegulation(ctx context.Context, in *GetRegulationRequest, opts ...grpc.CallOption) (*GetRegulationResponse, error) {
	out := new(GetRegulationResponse)
	err := c.cc.Invoke(ctx, "/reader.v1.ReaderGRPC/GetRegulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerGRPCClient) GetChapter(ctx context.Context, in *GetChapterRequest, opts ...grpc.CallOption) (*GetChapterResponse, error) {
	out := new(GetChapterResponse)
	err := c.cc.Invoke(ctx, "/reader.v1.ReaderGRPC/GetChapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerGRPCClient) GetAllChapters(ctx context.Context, in *GetAllChaptersRequest, opts ...grpc.CallOption) (*GetAllChaptersResponse, error) {
	out := new(GetAllChaptersResponse)
	err := c.cc.Invoke(ctx, "/reader.v1.ReaderGRPC/GetAllChapters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerGRPCClient) GetParagraphs(ctx context.Context, in *GetParagraphsRequest, opts ...grpc.CallOption) (*GetParagraphsResponse, error) {
	out := new(GetParagraphsResponse)
	err := c.cc.Invoke(ctx, "/reader.v1.ReaderGRPC/GetParagraphs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReaderGRPCServer is the server API for ReaderGRPC service.
// All implementations must embed UnimplementedReaderGRPCServer
// for forward compatibility
type ReaderGRPCServer interface {
	GetRegulation(context.Context, *GetRegulationRequest) (*GetRegulationResponse, error)
	GetChapter(context.Context, *GetChapterRequest) (*GetChapterResponse, error)
	GetAllChapters(context.Context, *GetAllChaptersRequest) (*GetAllChaptersResponse, error)
	GetParagraphs(context.Context, *GetParagraphsRequest) (*GetParagraphsResponse, error)
	mustEmbedUnimplementedReaderGRPCServer()
}

// UnimplementedReaderGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedReaderGRPCServer struct {
}

func (UnimplementedReaderGRPCServer) GetRegulation(context.Context, *GetRegulationRequest) (*GetRegulationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegulation not implemented")
}
func (UnimplementedReaderGRPCServer) GetChapter(context.Context, *GetChapterRequest) (*GetChapterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChapter not implemented")
}
func (UnimplementedReaderGRPCServer) GetAllChapters(context.Context, *GetAllChaptersRequest) (*GetAllChaptersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChapters not implemented")
}
func (UnimplementedReaderGRPCServer) GetParagraphs(context.Context, *GetParagraphsRequest) (*GetParagraphsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParagraphs not implemented")
}
func (UnimplementedReaderGRPCServer) mustEmbedUnimplementedReaderGRPCServer() {}

// UnsafeReaderGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReaderGRPCServer will
// result in compilation errors.
type UnsafeReaderGRPCServer interface {
	mustEmbedUnimplementedReaderGRPCServer()
}

func RegisterReaderGRPCServer(s grpc.ServiceRegistrar, srv ReaderGRPCServer) {
	s.RegisterService(&ReaderGRPC_ServiceDesc, srv)
}

func _ReaderGRPC_GetRegulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegulationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderGRPCServer).GetRegulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reader.v1.ReaderGRPC/GetRegulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderGRPCServer).GetRegulation(ctx, req.(*GetRegulationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderGRPC_GetChapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChapterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderGRPCServer).GetChapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reader.v1.ReaderGRPC/GetChapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderGRPCServer).GetChapter(ctx, req.(*GetChapterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderGRPC_GetAllChapters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllChaptersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderGRPCServer).GetAllChapters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reader.v1.ReaderGRPC/GetAllChapters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderGRPCServer).GetAllChapters(ctx, req.(*GetAllChaptersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderGRPC_GetParagraphs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParagraphsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderGRPCServer).GetParagraphs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reader.v1.ReaderGRPC/GetParagraphs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderGRPCServer).GetParagraphs(ctx, req.(*GetParagraphsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReaderGRPC_ServiceDesc is the grpc.ServiceDesc for ReaderGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReaderGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reader.v1.ReaderGRPC",
	HandlerType: (*ReaderGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRegulation",
			Handler:    _ReaderGRPC_GetRegulation_Handler,
		},
		{
			MethodName: "GetChapter",
			Handler:    _ReaderGRPC_GetChapter_Handler,
		},
		{
			MethodName: "GetAllChapters",
			Handler:    _ReaderGRPC_GetAllChapters_Handler,
		},
		{
			MethodName: "GetParagraphs",
			Handler:    _ReaderGRPC_GetParagraphs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
